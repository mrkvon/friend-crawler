{"version":3,"sources":["components/Visualization.tsx","contexts/session.ts","components/Login.tsx","helpers/draw.ts","simulation/index.ts","components/PersonCard.tsx","data/BFSFriends.ts","components/DataContainer.tsx","components/VisualizationContainer.tsx","components/PeopleList.tsx","components/Layout.tsx","App.tsx","reportWebVitals.ts","components/SessionProvider.tsx","index.tsx"],"names":["old","SessionContext","createContext","Login","className","props","useState","loading","setLoading","useContext","info","setInfo","useEffect","handleIncomingRedirect","url","window","location","href","restorePreviousSession","then","newInfo","catch","e","console","log","finally","handleLogin","a","login","oidcIssuer","redirectUrl","clientName","handleLogout","logout","commonProps","isLoggedIn","onClick","webId","drawText","context","text","options","x","y","font","textBaseline","textAlign","Object","assign","fillText","drawCircle","radius","beginPath","arc","Math","PI","fill","drawLine","start","end","moveTo","lineTo","stroke","Visualization","graph","grid","onTransform","onHover","onSelectNode","canvasEl","useRef","width","height","setVisualizationSize","current","getContext","offset","save","translate","clearRect","strokeStyle","min1","max1","min0","max0","getLineWidth","i","highlight","distance","origin","lineWidth","drawGrid","links","forEach","link","source","target","accentedColor","focusedColor","accented","nodes","filter","style","focused","successed","errored","rest","fillStyle","label","restore","updateCanvasSize","size","elementRef","clientHeight","clientWidth","getElementSize","addEventListener","removeEventListener","select","call","drag","clickDistance","on","dx","dy","zoom","scaleExtent","transform","k","numeric","dot","inv","withCanvasPosition","func","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","handleClick","ref","onMouseMove","onMouseOut","Infinity","classnames","Simulation","runs","simulation","forceSimulation","alphaDecay","force","forceLink","id","node","uri","strength","forceManyBody","distanceMax","forceX","forceY","forceCollide","forceCenter","stop","onTick","map","restart","update","thisNodeDict","fromEntries","nodeDict","random","values","alpha","selectNode","find","Statement","person","knows","onSelectPerson","position","bottom","pointerEvents","overflowY","overflowX","name","photo","src","alt","length","friend","findFriends","getSolidDataset","getResourceUrl","fetch","dataset","getThing","friends","getTermAll","foaf","value","getTerm","vcard","hasPhoto","resourceUrl","URL","hash","fixUri","match","begin","BFSFriends","initial","onChange","running","people","status","includes","unvisitedPerson","unvisited","Set","newlyFoundFriends","keys","PeopleContext","DataContainer","children","setPeople","timbl","me","Provider","matrix","vector","raw","transpose","basicGrid","VisualizationContainer","layout","setLayout","highlightedNode","setHighlightedNode","history","useHistory","setMatrix","lastUpdate","Date","now","prunedOrFullGraph","reduce","push","withNode","action","handleHover","encodeURIComponent","pathname","handleSelect","selectedNode","decodeURIComponent","slice","selectedNodeDependencies","selectedNodeUri","Array","from","selectNodeDependencies","transformedLayout","highlighted","selected","selectedDependencies","transformedNodesDict","sourceUri","targetUri","transformLayout","transformGrid","f","prevMatrix","Helmet","PersonCard","PeopleList","flat","PositionedLogin","styled","PositionedPeopleList","FullSizeVisualization","Layout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SessionProvider","sessionInfo","setSessionInfo","document","appElement","querySelector","Modal","setAppElement","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1bdca13.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport {\n  Vector,\n  Grid,\n  drawGrid,\n  drawCircle,\n  drawLine,\n  drawText,\n} from '../helpers/draw'\nimport classnames from 'classnames'\nimport { drag } from 'd3-drag'\nimport { zoom } from 'd3-zoom'\nimport { select } from 'd3-selection'\nimport numeric from 'numeric'\nimport { VisualizationGraph } from './VisualizationContainer'\n\ntype Props = Partial<React.CanvasHTMLAttributes<HTMLCanvasElement>> & {\n  graph: VisualizationGraph\n  grid: Grid\n  onTransform: (matrix: number[][]) => void\n  onHover: (position: Vector) => void\n  onSelectNode: (position: Vector) => void\n}\n\nlet old: number[][]\n\nconst Visualization: React.FC<Props> = ({\n  graph,\n  grid,\n  onTransform,\n  onHover,\n  onSelectNode,\n  ...props\n}: Props) => {\n  const canvasEl = useRef<HTMLCanvasElement>(null)\n  const [{ width, height }, setVisualizationSize] = useState({\n    width: 0,\n    height: 0,\n  })\n\n  useEffect(() => {\n    if (canvasEl && canvasEl.current) {\n      const context = canvasEl.current.getContext('2d')\n      if (context) {\n        const offset: Vector = [width / 2, height / 2]\n        context.save()\n        context.translate(...offset)\n        context.clearRect(-offset[0], -offset[1], width, height)\n        drawGrid(context, grid, width, height, offset)\n        graph.links.forEach(link => {\n          drawLine(\n            context,\n            [link.source.x, link.source.y],\n            [link.target.x, link.target.y],\n            {\n              strokeStyle: 'white',\n              lineWidth: 0.5,\n            },\n          )\n        })\n\n        const accentedColor = 'blue' // '#ff5d'\n        const focusedColor = 'purple'\n        const successedColor = '#7d7a'\n        const erroredColor = '#ff6961aa'\n        const accented = graph.nodes.filter(({ style }) => style === 'accent')\n        const focused = graph.nodes.filter(({ style }) => style === 'focus')\n        const successed = graph.nodes.filter(({ style }) => style === 'success')\n        const errored = graph.nodes.filter(({ style }) => style === 'error')\n        const rest = graph.nodes.filter(({ style }) => !style)\n\n        // draw all the nodes which are not special\n        rest.forEach(({ x, y }) =>\n          drawCircle(context, [x, y], 10, { fillStyle: '#fff8' }),\n        )\n\n        // draw errored nodes\n        errored.forEach(({ x, y }) =>\n          drawCircle(context, [x, y], 10, { fillStyle: erroredColor }),\n        )\n\n        // draw successed nodes\n        successed.forEach(({ x, y }) =>\n          drawCircle(context, [x, y], 10, { fillStyle: successedColor }),\n        )\n\n        // draw text of all the above nodes\n        ;[...errored, ...successed, ...rest].forEach(({ x, y, label }) =>\n          drawText(context, [x + 15, y], label, { fillStyle: '#fff4' }),\n        )\n\n        // draw accented nodes\n        accented.forEach(({ x, y }) =>\n          drawCircle(context, [x, y], 10, { fillStyle: accentedColor }),\n        )\n\n        accented.forEach(({ x, y, label }) =>\n          drawText(context, [x + 15, y], label, { fillStyle: accentedColor }),\n        )\n\n        // draw focused nodes\n        focused.forEach(({ x, y }) =>\n          drawCircle(context, [x, y], 10, { fillStyle: focusedColor }),\n        )\n\n        focused.forEach(({ x, y, label }) =>\n          drawText(context, [x + 15, y], label, { fillStyle: focusedColor }),\n        )\n\n        return () => context.restore()\n      }\n    }\n  }, [width, height, graph, canvasEl, grid])\n\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      if (canvasEl && canvasEl.current) {\n        const size = getElementSize(canvasEl)\n        setVisualizationSize(size)\n      }\n    }\n\n    updateCanvasSize()\n    window.addEventListener('load', updateCanvasSize)\n    window.addEventListener('resize', updateCanvasSize)\n\n    return () => {\n      window.removeEventListener('resize', updateCanvasSize)\n      window.removeEventListener('load', updateCanvasSize)\n    }\n  }, [width, height, canvasEl])\n\n  useEffect(() => {\n    if (canvasEl && canvasEl.current) {\n      select(canvasEl.current).call(\n        drag<HTMLCanvasElement, unknown>()\n          .clickDistance(2)\n          //.on('start', console.log)\n          .on('drag', e => {\n            onTransform([\n              [1, 0, e.dx],\n              [0, 1, e.dy],\n              [0, 0, 1],\n            ])\n          }),\n        //.on('end', console.log),\n      )\n\n      select(canvasEl.current).call(\n        zoom<HTMLCanvasElement, unknown>()\n          .clickDistance(2)\n          .scaleExtent([0.05, 3])\n          .on('zoom', e => {\n            old = old ?? [\n              [1, 0, -width / 2],\n              [0, 1, -height / 2],\n              [0, 0, 1],\n            ]\n            const { x, y, k } = e.transform\n\n            const zoom = [\n              [k, 0, x - width / 2],\n              [0, k, y - height / 2],\n              [0, 0, 1],\n            ]\n\n            const transform = numeric.dot(zoom, numeric.inv(old)) as number[][]\n            old = zoom\n\n            onTransform(transform)\n          }),\n      )\n    }\n  }, [canvasEl, onTransform, height, width])\n\n  const withCanvasPosition =\n    (\n      func: (position: Vector) => void,\n    ): React.MouseEventHandler<HTMLCanvasElement> =>\n    e => {\n      // https://stackoverflow.com/a/42111623\n      if (canvasEl && canvasEl.current) {\n        const rect = canvasEl.current.getBoundingClientRect()\n        const x = e.clientX - rect.left //x position within the element.\n        const y = e.clientY - rect.top //y position within the element.\n        func([x - width / 2, y - height / 2])\n      }\n    }\n\n  const handleMouseMove = withCanvasPosition(onHover)\n  const handleClick = withCanvasPosition(onSelectNode)\n\n  return (\n    <canvas\n      {...props}\n      ref={canvasEl}\n      onMouseMove={handleMouseMove}\n      // @TODO this piece is very inefficient, we search for a nonexistent node, just to unhighlight everything; but it works\n      onMouseOut={() => onHover([Infinity, Infinity])}\n      width={width}\n      height={height}\n      className={classnames(props.className, 'has-background-dark')}\n      onClick={handleClick}\n    />\n  )\n}\n\nexport default Visualization\n\nfunction getElementSize(elementRef: React.RefObject<HTMLCanvasElement>) {\n  if (elementRef && elementRef.current) {\n    const { clientHeight: height, clientWidth: width } = elementRef.current\n    return { height, width }\n  } else return { height: 0, width: 0 }\n}\n","import { ISessionInfo } from '@inrupt/solid-client-authn-browser'\nimport React, { createContext } from 'react'\n\nexport type SessionInfo = Required<ISessionInfo>\nexport const SessionContext = createContext<\n  [SessionInfo | null, React.Dispatch<React.SetStateAction<SessionInfo | null>>]\n>([\n  null,\n  () => {\n    return\n  },\n])\n","import React, { useState, useEffect, useContext } from 'react'\nimport {\n  login,\n  logout,\n  handleIncomingRedirect,\n} from '@inrupt/solid-client-authn-browser'\nimport { SessionContext, SessionInfo } from '../contexts/session'\n\ninterface Props {\n  className?: string\n}\n\nconst Login: React.FC<Props> = (\n  { className, ...props }: Props = { className: '' },\n) => {\n  const [loading, setLoading] = useState(true)\n  const [info, setInfo] = useContext(SessionContext)\n  useEffect(() => {\n    setLoading(true)\n    handleIncomingRedirect({\n      url: window.location.href,\n      restorePreviousSession: true,\n    })\n      .then(newInfo => {\n        if (newInfo) setInfo(newInfo as SessionInfo)\n      })\n      .catch(e => {\n        console.log(e)\n        setInfo(null)\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  }, [setInfo])\n  const handleLogin = async () => {\n    setLoading(true)\n    await login({\n      oidcIssuer: 'https://solidcommunity.net',\n      redirectUrl: window.location.href,\n      clientName: 'Friends Crawler',\n    })\n    setLoading(false)\n  }\n\n  const handleLogout = async () => {\n    setLoading(true)\n    await logout()\n    if (setInfo) setInfo(null)\n    setLoading(false)\n  }\n\n  const commonProps = {\n    ...props,\n    className: `${className} button`,\n  }\n\n  return loading ? (\n    <span {...commonProps}>Loading</span>\n  ) : info?.isLoggedIn ? (\n    <button {...commonProps} onClick={handleLogout}>\n      {info?.webId} Logout\n    </button>\n  ) : (\n    <button {...commonProps} onClick={handleLogin}>\n      Login\n    </button>\n  )\n}\n\nexport default Login\n","export type Vector = [number, number]\n\nexport type Grid = {\n  origin: Vector // coordinate of the origin\n  distance: number // distance between lines\n  highlight: number // which lines should be highlighted\n}\n\ntype Options = Partial<CanvasRenderingContext2D>\n\nexport const drawText = (\n  context: CanvasRenderingContext2D,\n  [x, y]: Vector,\n  text: string,\n  options: Options,\n) => {\n  context.font = '20px Arial'\n  context.textBaseline = 'middle'\n  context.textAlign = 'left'\n  // context.fillStyle = '#fff7'\n  Object.assign(context, options)\n  context.fillText(text, x, y)\n}\n\nexport const drawCircle = (\n  context: CanvasRenderingContext2D,\n  [x, y]: Vector,\n  radius: number,\n  options: Options,\n) => {\n  Object.assign(context, options)\n  context.beginPath()\n  context.arc(x, y, radius, 0, 2 * Math.PI)\n  context.fill()\n}\n\nexport const drawLine = (\n  context: CanvasRenderingContext2D,\n  start: Vector,\n  end: Vector,\n  options: Options,\n) => {\n  Object.assign(context, options)\n\n  context.beginPath()\n  context.moveTo(...start)\n  context.lineTo(...end)\n  context.stroke()\n}\n\nexport const drawGrid = (\n  context: CanvasRenderingContext2D,\n  grid: Grid,\n  width: number,\n  height: number,\n  offset: Vector = [0, 0],\n) => {\n  const strokeStyle = '#fff2'\n  const min1 = -offset[1]\n  const max1 = height - offset[1]\n  const min0 = -offset[0]\n  const max0 = width - offset[0]\n\n  const getLineWidth = (i: number) =>\n    i === 0 ? 2 : i % grid.highlight === 0 ? 1 : 0.5\n\n  let i = 0\n  while (i * grid.distance + grid.origin[0] <= max0) {\n    const x = i * grid.distance + grid.origin[0]\n    if (x >= min0) {\n      drawLine(context, [x, min1], [x, max1], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i++\n  }\n\n  i = -1\n  while (i * grid.distance + grid.origin[0] >= min0) {\n    const x = i * grid.distance + grid.origin[0]\n    if (x <= max0) {\n      drawLine(context, [x, min1], [x, max1], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i--\n  }\n\n  i = 0\n  while (i * grid.distance + grid.origin[1] <= max1) {\n    const y = i * grid.distance + grid.origin[1]\n    if (y >= min1) {\n      drawLine(context, [min0, y], [max0, y], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i++\n  }\n\n  i = -1\n  while (i * grid.distance + grid.origin[1] >= min1) {\n    const y = i * grid.distance + grid.origin[1]\n    if (y <= max1) {\n      drawLine(context, [min0, y], [max0, y], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i--\n  }\n}\n","import {\n  forceSimulation,\n  forceCollide,\n  forceLink,\n  forceManyBody,\n  forceCenter,\n  forceX,\n  forceY,\n  SimulationNodeDatum,\n  SimulationLinkDatum,\n  ForceLink,\n} from 'd3-force'\nimport { Coords, Uri, SimulationNode, SimulationLink, Node } from './types'\n\ninterface SimulationNodeExt extends SimulationNodeDatum {\n  uri: Uri\n}\n\nexport type SimulationLinkExt = SimulationLinkDatum<SimulationNodeExt>\n\nexport default class Simulation {\n  nodes: SimulationNodeExt[] = []\n  links: SimulationLinkExt[] = []\n\n  runs = false\n\n  simulation = forceSimulation()\n    .alphaDecay(0.005)\n    .force(\n      'link',\n      forceLink()\n        .id(node => (node as SimulationNodeExt).uri)\n        .distance(50)\n        .strength(0.1),\n    )\n    .force('charge', forceManyBody().strength(-150).distanceMax(500))\n    .force('gravityX', forceX(0).strength(0.01))\n    .force('gravityY', forceY(0).strength(0.01))\n    .force('collide', forceCollide(15))\n    .force('center', forceCenter(0, 0))\n    .stop()\n\n  start = ({\n    nodes,\n    links,\n    onTick,\n  }: {\n    nodes: SimulationNode[]\n    links: SimulationLink[]\n    onTick: (simulation: {\n      nodes: SimulationNode[]\n      links: SimulationLinkExt[]\n    }) => void\n  }) => {\n    this.nodes = nodes as SimulationNodeExt[]\n    this.links = links.map(link => ({ ...link })) as SimulationLinkExt[]\n\n    this.simulation.nodes(this.nodes)\n    ;(\n      this.simulation.force('link') as ForceLink<\n        SimulationNodeExt,\n        SimulationLinkExt\n      >\n    ).links(this.links)\n\n    this.simulation.on('tick', () => {\n      onTick({\n        nodes: this.nodes as SimulationNode[],\n        links: this.links,\n      })\n    })\n\n    this.simulation.restart()\n    this.runs = true\n  }\n\n  stop = () => {\n    this.runs = false\n    return this.simulation.stop()\n  }\n\n  update = ({ nodes, links }: { nodes: Node[]; links: SimulationLink[] }) => {\n    this.simulation.stop()\n    // combine current visualization and\n    const thisNodeDict: { [uri: string]: SimulationNodeExt } =\n      Object.fromEntries(this.nodes.map(node => [node.uri, node]))\n    const nodeDict: { [uri: string]: SimulationNodeExt } = Object.fromEntries(\n      nodes.map(node => [\n        node.uri,\n        {\n          ...node,\n          x: Math.random() * 400,\n          y: Math.random() * 400,\n        },\n      ]),\n    )\n    this.nodes = Object.values({ ...nodeDict, ...thisNodeDict })\n    this.links = links.map(link => ({ ...link })) as SimulationLinkExt[]\n\n    this.simulation.nodes(this.nodes)\n    ;(\n      this.simulation.force('link') as ForceLink<\n        SimulationNodeExt,\n        SimulationLinkExt\n      >\n    ).links(this.links)\n\n    this.simulation.alpha(0.5).restart()\n  }\n\n  selectNode = ({ x, y }: Coords) =>\n    this.simulation.find(x, y, 32) as SimulationNodeExt\n}\n","import React from 'react'\nimport { Person } from './DataContainer'\n\ninterface Props {\n  person: Person\n  knows: Person[]\n  onSelectPerson: (uri: string) => void\n}\n\nconst Statement = ({ person, knows, onSelectPerson }: Props) => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        width: '100%',\n        top: '0',\n        bottom: 0,\n        pointerEvents: 'none',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n      }}\n    >\n      <div className=\"columns mr-1 mt-6\">\n        <div className=\"column is-one-quarter is-offset-three-quarters\">\n          <div\n            className=\"card\"\n            style={{ pointerEvents: 'all', overflowX: 'auto', width: '100%' }}\n          >\n            <header className=\"card-header\">\n              <a className=\"card-header-title\" href={person.uri}>\n                {person.name || person.uri}\n              </a>\n            </header>\n            {person.photo && (\n              <div className=\"card-image\">\n                <figure className=\"image\">\n                  <img src={person.photo} alt={person.name} />\n                </figure>\n              </div>\n            )}\n            <header className=\"card-header\">\n              <p className=\"card-header-title\">knows: {knows.length}</p>\n            </header>\n            <section className=\"card-content\">\n              <ul className=\"buttons are-small\">\n                {knows.map(friend => (\n                  <li\n                    onClick={() => onSelectPerson(friend.uri)}\n                    key={friend.uri}\n                    className=\"button is-link\"\n                  >\n                    {friend.name}\n                  </li>\n                ))}\n              </ul>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Statement\n","import { fetch } from '@inrupt/solid-client-authn-browser'\nimport {\n  getSolidDataset,\n  getTerm,\n  getThing,\n  getTermAll,\n  IriString,\n} from '@inrupt/solid-client'\nimport { foaf, vcard } from 'rdf-namespaces'\nimport { Person } from '../components/DataContainer'\n\nexport const findFriends = async (\n  webId: IriString,\n): Promise<{ name: string; friends: IriString[]; photo: string }> => {\n  if (webId) {\n    const dataset = await getSolidDataset(getResourceUrl(webId), { fetch })\n    const person = getThing(dataset, webId)\n    if (person) {\n      const friends = getTermAll(person, foaf.knows).map(a => a.value)\n      const name = getTerm(person, foaf.name)?.value ?? ''\n      const photo = getTerm(person, vcard.hasPhoto)?.value ?? ''\n      return { name, photo, friends }\n    }\n  }\n\n  return { name: '', photo: '', friends: [] }\n}\n\n// We'll need to figure out how to stop this\nexport const BFSFriends = (\n  initial: Person[],\n  onChange: (people: { [uri: string]: Person }) => void,\n): (() => void) => {\n  console.log('start crawling')\n  let running = true\n  let people: { [uri: string]: Person } = Object.fromEntries(\n    initial.map(({ uri, ...person }) => {\n      uri = fixUri(uri)\n      return [uri, { ...person, uri }]\n    }),\n  )\n  onChange(people)\n  ;(async () => {\n    while (\n      running &&\n      Object.values(people)\n        .map(person => person.status)\n        .includes('pending')\n    ) {\n      // take a first unvisited person\n      const unvisitedPerson = Object.values(people).find(\n        person => person.status === 'pending',\n      )\n      if (unvisitedPerson) {\n        // fetch their friends\n        try {\n          const { name, photo, friends } = await findFriends(\n            unvisitedPerson.uri,\n          )\n          const unvisited: Person = {\n            ...unvisitedPerson,\n            status: 'success',\n            knows: new Set(friends.map(uri => fixUri(uri))),\n            name,\n            photo,\n          }\n\n          // add their friends\n          const newlyFoundFriends = Object.fromEntries(\n            friends\n              .map(\n                uri =>\n                  [\n                    fixUri(uri),\n                    {\n                      status: 'pending',\n                      knows: new Set(),\n                      name: '',\n                      uri: fixUri(uri),\n                    } as Person,\n                  ] as [IriString, Person],\n              )\n              .filter(([uri]) => !Object.keys(people).includes(uri)),\n          )\n\n          people = {\n            ...people,\n            ...newlyFoundFriends,\n            [unvisited.uri]: unvisited,\n          }\n        } catch (e) {\n          // set their status to error\n          people = {\n            ...people,\n            [unvisitedPerson.uri]: { ...unvisitedPerson, status: 'error' },\n          }\n        } finally {\n          onChange({ ...people })\n        }\n      } else break\n    }\n  })()\n  return () => {\n    console.log('stop crawling')\n    running = false\n  }\n}\n\nconst getResourceUrl = (url: string): string => {\n  const resourceUrl = new URL(url)\n  resourceUrl.hash = ''\n  return resourceUrl.href\n}\n\nconst fixUri = (uri: IriString) => {\n  const regex = /^(.+)\\.solid.community(.*)$/\n  const match = uri.match(regex)\n  if (match) {\n    const [, begin, end] = match\n    uri = `${begin}.solidcommunity.net${end}`\n  }\n\n  return uri\n}\nexport default BFSFriends\n","import React, { createContext, useContext, useState, useEffect } from 'react'\nimport { SessionContext } from '../contexts/session'\nimport BFSFriends from '../data/BFSFriends'\nimport { IriString } from '@inrupt/solid-client'\n\nexport const PeopleContext = createContext<{ [uri: string]: Person }>({})\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport type Person = {\n  uri: IriString\n  name: string\n  photo: string\n  status: 'success' | 'error' | 'pending'\n  knows: Set<IriString>\n}\n\nconst DataContainer = ({ children }: Props) => {\n  const [info] = useContext(SessionContext)\n  const [people, setPeople] = useState<{ [uri: string]: Person }>({})\n\n  useEffect(() => {\n    // here we lookup people connected to us\n    const timbl: Person = {\n      uri: 'https://timbl.solidcommunity.net/profile/card#me',\n      name: '',\n      photo: '',\n      status: 'pending',\n      knows: new Set(),\n    }\n\n    const me: Person = {\n      uri: info?.webId ?? '',\n      name: '',\n      status: 'pending',\n      knows: new Set(),\n      photo: '',\n    }\n\n    return BFSFriends([timbl, ...(info?.isLoggedIn ? [me] : [])], setPeople)\n  }, [info])\n\n  return (\n    <PeopleContext.Provider value={people}>{children}</PeopleContext.Provider>\n  )\n}\n\nexport default DataContainer\n","import React, { useEffect, useState, useContext } from 'react'\nimport Visualization from './Visualization'\nimport Simulation, { SimulationLinkExt } from '../simulation'\nimport { SimulationNode, SimulationLink } from '../simulation/types'\nimport { Vector } from '../helpers/draw'\nimport { Grid } from '../helpers/draw'\nimport numeric from 'numeric'\nimport PersonCard from './PersonCard'\nimport { useHistory } from 'react-router-dom'\nimport { PeopleContext, Person } from './DataContainer'\nimport { IriString } from '@inrupt/solid-client'\nimport { Helmet } from 'react-helmet'\n\ntype PeopleGraph = {\n  [uri: string]: Person\n}\n\nconst transform = (matrix: number[][], vector: Vector): Vector => {\n  const raw = numeric.dot(\n    matrix,\n    numeric.transpose([[...vector, 1]]),\n  ) as number[][]\n  const [[x], [y]] = raw\n  return [x, y]\n}\n\ntype VisualizationNode = {\n  x: number\n  y: number\n  uri: string\n  label: string\n  style: string\n  r: number\n}\n\ntype VisualizationLink = {\n  source: VisualizationNode\n  target: VisualizationNode\n}\n\nexport type VisualizationGraph = {\n  nodes: VisualizationNode[]\n  links: VisualizationLink[]\n}\n\ninterface SimulationGraph {\n  nodes: SimulationNode[]\n  links: SimulationLinkExt[]\n}\n\nconst basicGrid: Grid = {\n  origin: [0, 0],\n  distance: 20,\n  highlight: 5,\n}\n\nconst transformGrid = (matrix: number[][], grid: Grid): Grid => {\n  let distance = grid.distance * matrix[0][0]\n  while (distance < 20) {\n    distance *= 5\n  }\n  return {\n    origin: transform(matrix, grid.origin),\n    distance,\n    highlight: grid.highlight,\n  }\n}\n\nconst transformLayout = (\n  matrix: number[][],\n  graph: SimulationGraph,\n  people: PeopleGraph,\n  highlighted: string | undefined,\n  selected: string | undefined,\n  selectedDependencies: string[],\n): VisualizationGraph => {\n  const transformedNodesDict = Object.fromEntries(\n    graph.nodes.map(node => {\n      const [x, y] = transform(matrix, [node.x, node.y])\n      const status = people[node.uri]?.status ?? ''\n      const style =\n        status === 'success' ? 'success' : status === 'error' ? 'error' : ''\n      return [\n        node.uri,\n        {\n          ...node,\n          x,\n          y,\n          style,\n          label: people[node.uri]?.name ?? '',\n        } as VisualizationNode,\n      ]\n    }),\n  )\n\n  if (highlighted && transformedNodesDict[highlighted]) {\n    transformedNodesDict[highlighted].style = 'accent'\n  }\n\n  selectedDependencies.forEach(uri => {\n    if (transformedNodesDict[uri]) transformedNodesDict[uri].style = 'accent'\n  })\n\n  if (selected && transformedNodesDict[selected]) {\n    transformedNodesDict[selected].style = 'focus'\n  }\n\n  const links = graph.links.map(link => {\n    const sourceUri =\n      typeof link.source === 'string'\n        ? link.source\n        : typeof link.source === 'number'\n        ? graph.nodes[link.source].uri\n        : link.source.uri\n    const targetUri =\n      typeof link.target === 'string'\n        ? link.target\n        : typeof link.target === 'number'\n        ? graph.nodes[link.target].uri\n        : link.target.uri\n    const source = transformedNodesDict[sourceUri]\n    const target = transformedNodesDict[targetUri]\n    return { source, target }\n  })\n\n  return { nodes: Object.values(transformedNodesDict), links }\n}\n\nconst selectNodeDependencies = (\n  selectedNodeUri: string | undefined,\n  graph: PeopleGraph,\n): string[] => {\n  if (!selectedNodeUri) return []\n  return Array.from(graph?.[selectedNodeUri]?.knows ?? new Set())\n}\n\nconst VisualizationContainer: React.FC = props => {\n  const [simulation] = useState(new Simulation())\n\n  const [layout, setLayout] = useState<SimulationGraph>({\n    nodes: [],\n    links: [],\n  })\n\n  const [highlightedNode, setHighlightedNode] = useState<string | undefined>()\n\n  // the history will now keep the current selected node\n  const history = useHistory()\n\n  const people = useContext(PeopleContext)\n\n  // transformation matrix\n  const [matrix, setMatrix] = useState<number[][]>([\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n  ])\n\n  // initialize simulation\n  useEffect(() => {\n    let lastUpdate = Date.now() - 20\n    simulation.start({\n      nodes: [],\n      links: [],\n      onTick: ({ nodes, links }) => {\n        const now = Date.now()\n        if (now > lastUpdate + 20) {\n          setLayout({ nodes: [...nodes], links: [...links] })\n          lastUpdate = now\n        }\n      },\n    })\n    return () => {\n      simulation.stop()\n    }\n  }, [simulation])\n\n  // when graph changes, update simulation\n  useEffect(() => {\n    const prunedOrFullGraph = people\n\n    const nodes = Object.values(prunedOrFullGraph).map(\n      ({ name: label, uri }) => ({\n        label,\n        uri,\n      }),\n    )\n\n    const links = Object.values(prunedOrFullGraph).reduce(\n      (nodes, { uri: source, knows }) => {\n        knows.forEach(target => nodes.push({ source, target }))\n        return nodes\n      },\n      [] as SimulationLink[],\n    )\n\n    simulation.update({ nodes, links })\n  }, [people, simulation])\n\n  const handleTransform = (matrix: number[][]): void => {\n    setMatrix(prevMatrix => numeric.dot(matrix, prevMatrix) as number[][])\n  }\n\n  const withNode = (action: (uri: string) => unknown) => {\n    return (position: Vector): void => {\n      // first transform to local coordinates\n      const [x, y] = transform(numeric.inv(matrix), position)\n      // then find the node in simulation\n      action(simulation.selectNode({ x, y })?.uri)\n    }\n  }\n\n  const handleHover = withNode(setHighlightedNode)\n  const selectNode = (node: IriString) => {\n    const uri = node ? `/${encodeURIComponent(node)}` : '/'\n    if (uri !== history.location.pathname) history.push(uri)\n  }\n  const handleSelect = withNode(selectNode)\n\n  const selectedNode = decodeURIComponent(history.location.pathname.slice(1))\n\n  const selectedNodeDependencies = selectNodeDependencies(selectedNode, people)\n  // transform layout to TransformedLayout\n  const transformedLayout = transformLayout(\n    matrix,\n    layout,\n    people,\n    highlightedNode,\n    selectedNode,\n    selectedNodeDependencies,\n  )\n\n  const grid = transformGrid(matrix, basicGrid)\n\n  let person, knows\n\n  if (selectedNode) {\n    person = people[selectedNode]\n    if (person) {\n      knows = Array.from(person.knows).map(f => people[f])\n    }\n  }\n\n  return (\n    <>\n      <Visualization\n        graph={transformedLayout}\n        grid={grid}\n        onTransform={handleTransform}\n        onHover={handleHover}\n        onSelectNode={handleSelect}\n        {...props}\n      />\n\n      <Helmet>\n        <title>\n          {selectedNode && `${people[selectedNode]?.name || selectedNode} - `}\n          Friend Crawler\n        </title>\n      </Helmet>\n\n      {person && knows && (\n        <PersonCard person={person} knows={knows} onSelectPerson={selectNode} />\n      )}\n    </>\n  )\n}\n\nexport default VisualizationContainer\n","import React, { useContext } from 'react'\nimport { PeopleContext, Person } from './DataContainer'\n\ninterface Props {\n  people: { [uri: string]: Person }\n}\n\nexport const PeopleList = ({ people, ...props }: Props) => (\n  <div {...props}>\n    <div>{Object.keys(people).length}</div>\n    <div>\n      pending:{' '}\n      {\n        Object.values(people).filter(person => person.status === 'pending')\n          .length\n      }\n    </div>\n    <div>\n      success:{' '}\n      {\n        Object.values(people).filter(person => person.status === 'success')\n          .length\n      }\n    </div>\n    <div>\n      error:{' '}\n      {Object.values(people).filter(person => person.status === 'error').length}\n    </div>\n    <div>\n      links:{' '}\n      {\n        Object.values(people)\n          .map(person => Array.from(person.knows))\n          .flat().length\n      }\n    </div>\n  </div>\n)\n\ntype ULProps = Partial<React.HTMLAttributes<HTMLUListElement>>\n\nexport const PeopleListContainer = (props: ULProps) => {\n  const people = useContext(PeopleContext)\n  return <PeopleList people={people} {...props} />\n}\n","import React from 'react'\nimport Login from './Login'\nimport VisualizationContainer from './VisualizationContainer'\nimport styled from 'styled-components'\nimport { PeopleListContainer } from './PeopleList'\n\nconst PositionedLogin = styled(Login)`\n  position: fixed;\n  top: 1em;\n  right: 1em;\n  display: block;\n`\n\nconst PositionedPeopleList = styled(PeopleListContainer)`\n  position: fixed;\n  top: 1em;\n  left: 1em;\n  display: block;\n  background-color: white;\n  padding: 0.25rem;\n`\n\nconst FullSizeVisualization = styled(VisualizationContainer)`\n  height: 100vh;\n  width: 100vw;\n  display: block;\n`\n\nconst Layout: React.FC = () => {\n  return (\n    <>\n      <PositionedPeopleList />\n\n      <PositionedLogin />\n\n      <FullSizeVisualization />\n    </>\n  )\n}\n\nexport default Layout\n","import React from 'react'\nimport Layout from './components/Layout'\nimport DataContainer from './components/DataContainer'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nconst App: React.FC = () => (\n  <Router>\n    <DataContainer>\n      <Layout />\n    </DataContainer>\n  </Router>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React, { useState, ReactNode } from 'react'\nimport { SessionContext, SessionInfo } from '../contexts/session'\n\ninterface Props {\n  children: ReactNode\n}\n\nconst SessionProvider: React.FC<Props> = (props: Props) => {\n  const [sessionInfo, setSessionInfo] = useState<SessionInfo | null>(null)\n\n  return (\n    <SessionContext.Provider value={[sessionInfo, setSessionInfo]}>\n      {props.children}\n    </SessionContext.Provider>\n  )\n}\n\nexport default SessionProvider\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport SessionProvider from './components/SessionProvider'\nimport Modal from 'react-modal'\n\nif (typeof document === 'object') {\n  const appElement = document.querySelector('#root') as HTMLElement\n\n  Modal.setAppElement(appElement)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <SessionProvider>\n      <App />\n    </SessionProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}